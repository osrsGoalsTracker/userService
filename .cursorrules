- Whenever you make code changes, check if the associated tests need to be changed. If you can't find any associated tests, write them. 
- Whenever you write code, check if the contents of the README needs to be updated. 
- Write functions and components in as small and reusable a manner as possible
- Never leave whitespace
- Always respond to prompts with "Howdy!" so that I know you've read this file.
- Follow SOLID design principles within layers to ensure the code is reusable and well-structured.
- Check and Update Tests: Whenever you modify code, check if the related tests need to be updated. If there are no tests, write them.
- Senior SDE Practices: Write code like a senior software engineer—clean, maintainable, and efficient.
- Always use Lombok @Value and @Builder annotations for data objects. Use @Data with NoArgsConstructor for request objects.
- Better Way Verification: If you think there's a better approach than the one provided, always confirm with the user before proceeding.
- If you ever have questions about how to use the Goals Tracker DAO, you should curl the README.md file at the URL https://raw.githubusercontent.com/osrsGoalsTracker/goalTrackerDao/refs/heads/main/README.md
- if you ever have questions about how to use the osrs hiscore client, you should curl the README.md file at the URL https://raw.githubusercontent.com/osrsGoalsTracker/osrs-hiscores/refs/heads/main/README.md
- avoid using full class paths in your code (like com.osrs.goals.persistence.pojo.dao.User), instead use the import statements to import the classes you need. If there are conflicts, try to be creative in order to avoid them.
- Always use 4 spaces for indentation.
- When implementing a new handler, always ensure that the lambda is built by the build.gradle file and that there are basically 4 lines in the handleRequest function: 1. parse input 2. validate input 3. run service function 4. return output.
- Always build the project and verify that it compiles and runs correctly before considering your work complete. If there are any errors, fix them.
- always add javadoc comments to the code you write.
- Ensure the docs in docs/ are up to date when you make changes to the code.
- String comparison should be done using the equalsIgnoreCase method.
- When updating the repository layer, you carefully review the DynamoDB table schema and sort key definitions in the DDB_SCHEMA.md file before writing any code in order to ensure that the code is compatible with the table schema and sort key definitions.
- You do not change the DDB_SCHEMA.md file unless explicitly instructed to do so. If you believe that the DDB_SCHEMA.md file is incorrect, you should inform the user and ask them to update the file specifying what needs to be changed and why.
- In the repository layer, we will frequently use partial sort keys to access data efficiently. If you are ever confused about how to easily access data, check the DDB_SCHEMA.md file. If that does not answer your question, stop and ask me to clarify.
- Follow the following service architecture:

```
# Layered Architecture Rule Set

This rule set defines how to organize and implement a modular layered architecture for a product, including both domain services (e.g., `UserService`, `CharacterService`) and orchestration Lambdas for event-driven workflows. It outlines layers, interaction rules, service boundaries, and specific patterns to handle cross-cutting concerns like events and shared resources.

---

## Rule Set

### Layer Definitions

#### Domain Layer (Service-Specific)

Each domain (e.g., `User`, `Character`, `Goal`) has its own service responsible for managing the business logic and data access for its entities. It is structured into three sub-layers:

1. **Handler Layer**
   - Contains entry points for APIs (e.g., Lambda handlers or controllers).
   - Handles input (e.g., HTTP requests or events) and delegates logic to the service layer.
   - Only calls the service layer.

2. **Service Layer**
   - Encapsulates business logic for the domain.
   - Uses repository interfaces to fetch or persist data.
   - Only depends on the repository layer or other services via interfaces.

3. **Repository Layer**
   - Abstracts data access logic.
   - Interacts with the underlying data store (e.g., DynamoDB, RDBMS).
   - Provides methods scoped to the domain (e.g., `findUserById`, `saveGoal`).
   - Does not call the service layer.

#### Common Layer

Contains reusable components across domains:

1. **Shared Models**
   - Defines domain-agnostic objects (e.g., events like `GoalCreationEvent`) that are shared across services.

2. **Shared Utilities**
   - Includes helpers for common tasks (e.g., event publishing, validation).

#### Orchestration Layer

Handles AWS-specific orchestration tasks, such as:

- Managing AWS resources (e.g., creating SQS queues, associating them with Lambdas).
- Publishing or consuming events from the event bus.
- Coordinating interactions between services.

**Requirements:**
- Modular design: Each orchestration workflow (e.g., queue creation, event publishing) is a self-contained module.
- Reuse shared models and utilities to ensure consistency with the domain layer.

#### External Layer

Responsible for managing communication with third-party systems, APIs, or services. This layer:

- Abstracts details like HTTP request/response formats, authentication, and API endpoints.
- Provides a clean and reusable interface for external communication.
- Decouples external systems from domain logic.

---

### Rules for Inter-Layer Interaction

1. **Handler Layer**
   - Allowed to call: Service layer.
   - Not allowed to call directly: Repository layer or shared utilities.

2. **Service Layer**
   - Allowed to call: Repository layer, other services via interfaces, shared utilities.
   - Not allowed to call directly: Handlers or orchestration modules.

3. **Repository Layer**
   - Allowed to call: Data store (e.g., DynamoDB SDK).
   - Not allowed to call: Handlers, service layer, or orchestration modules.

4. **Orchestration Layer**
   - Allowed to call: Shared models/utilities, service layer interfaces.
   - Not allowed to call directly: Repository layer.

---

### Rules for Inter-Service Interaction

1. **Direct Service-to-Service Interaction**
   - Use interfaces to define contracts for interactions (e.g., `CharacterService` interface for fetching character data).
   - Use dependency injection to bind the correct implementation.

2. **Event-Driven Interaction**
   - Services can publish domain events (e.g., `GoalCreatedEvent`) to the event bus.
   - Other services or orchestration Lambdas consume these events and react accordingly.

3. **Avoid Cross-Service Repository Access**
   - Services should never directly query another service’s repository. Always go through the service layer or use events for decoupled communication.

---

### Example Tree Structure: Deep Dive into CharacterService

**Folder Structure**

src/
├── main/
│   ├── java/
│   │   ├── com/
│   │   │   ├── example/
│   │   │   │   ├── character/
│   │   │   │   │   ├── handler/
│   │   │   │   │   │   ├── CharacterHandler.java             # Entry point for API
│   │   │   │   │   ├── service/
│   │   │   │   │   │   ├── CharacterService.java             # Interface
│   │   │   │   │   │   ├── CharacterServiceImpl.java         # Business logic
│   │   │   │   │   ├── repository/
│   │   │   │   │   │   ├── CharacterRepository.java          # Interface
│   │   │   │   │   │   ├── CharacterRepositoryImpl.java      # DynamoDB implementation
│   │   │   │   │   ├── model/
│   │   │   │   │   │   ├── Character.java                    # Domain object
│   │   │   │   │   │   ├── CreateCharacterRequest.java       # API request DTO
│   │   │   │   │   │   ├── CreateCharacterResponse.java      # API response DTO
│   │   │   │   │   ├── di/
│   │   │   │   │   │   ├── CharacterModule.java              # Guice DI config
│   │   │   │   │   ├── api/
│   │   │   │   │   │   ├── GameApiClient.java                # External API client
│   │   │   │   │   │   ├── model/
│   │   │   │   │   │   │   ├── GameCharacterResponse.java    # API response model
```
